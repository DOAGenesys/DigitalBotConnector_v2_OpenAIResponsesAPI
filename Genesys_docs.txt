Digital Bot Connector (v2) Customer API Spec
Description
The Digital Bot Connector allows third-party bots to interact conversationally with customers. It enables end-users to communicate directly with third-party bots through the customer Bot Connector Service Provider (BCSP) platform using Genesys Cloud Messaging.

Genesys provides a Digital Bot Connector API Specification that customers can implement on their end, allowing our interface to connect seamlessly, expanding compatibility and available options.

The external BCSP will implement the Genesys Digital Bot Connector REST API on their messaging platform, facilitating the sending and receiving of text, files, structured responses using the Genesys Normalized Format, and interaction with any bot, NLU, or Generative AI/LLM provider, chosen by the customer.

Use the Digital Call Bot Connector action in Architect Inbound Message Flows. This action allows integration of the message flow with any bot source for processing, which then returns intents and slots/entities to Architect.

Glossary
Intent: An intent represents an action a user wants to perform, such as ordering pizzas or drinks. Each intent includes a descriptive name, sample utterances, and details on how to fulfill the intent. Most NLU providers support both custom intents and built-in intents, allowing you to set up your bot quickly.
Slot/Entity: An entity is a parameter that an intent can require. These are added as part of the intent configuration. At runtime, the bot prompts the user for specific entity values, which the user must provide before the bot can fulfill the intent. For instance, an intent to order pizza may require entities for size, crust type, and number of pizzas. Each entity includes a type and prompts that the bot sends to elicit values from the user. The bot understands entity values, even if the user provides additional words. Furthermore, each entity has a type. NLU providers offer the option to create custom entity types or to use built-in entity types. For example, when creating an OrderPizza intent, we might use custom entity types such as Size with values Small, Medium, and Large, or Crust with values Thick and Thin. Alternatively, we could utilize built-in entity types like number, date, or currency.
NLU: NLU (Natural Language Understanding) platforms that enable users to integrate conversation interfaces into applications.
Digital Bot Connector Integration: Allows using the Call Digital Bot Connector action within Architect message flows. The integration can be installed via AppFoundry.
Digital Bot Connector Integration
The Digital Bot Connector Integration can be installed, configured, and activated via the Genesys Integrations UI. It allows configuring options like if the integration will support file transfers from the bot to the end user, the connection credentials such as a connection secret, and the Bot Connector URI, which will be called by Genesys to send the message from a messaging conversation to the Digital Bot Connector’s Bot (eg. https://mycustomserver:443/botconnector). For simplicity, the rest of the page will reference the Bot Connector URI as https://{bcsp.example.com}/botconnector

It is required to activate the integration before start using it.

Bot Loading/Configuration
Architect requires a manifest of the customer's bots for flow authoring and to be able to invoke the proper bot at flow runtime. To facilitate this, the customer BCSP will implement the GET request to https://{bcsp.example.com}/botconnector/bots. This endpoint will provide a list of bots in JSON format to be consumed by Cloud Architect.

Each bot will include a unique ID, a display name, an optional description, and a list of versions. Each version will contain a list of possible return intents and the expected entity values that will be captured and returned.

Please note that currently running flows will use the data set that was in place at the time of publishing. If the list of bots changes at any time, the existing flows will need to be updated. It is recommended to add a new version to the bot, rather than modifying an existing version. After that, the Digital Bot Connector action can be updated accordingly, and the flow can be published in Architect to start using the new version.



Get the list of bots webhook
Your Bot Connector Service Provider platform can receive a request to retrieve the list of Bots available, by implementing the /bots endpoint.

Endpoint

GET https://{bcsp.example.com}/botconnector/bots

Request


Body


No Request Body


Response


HTTPS Status


200 OK


Body



Botlist Example
{
  "entities": [
    {
      "id": "11095674-46cc-4a87-b0bb-385b317ad000",
      "name": "OrderCookieBot",
      "provider": "AWS Lex V2",
      "description": "This is a mock bot for demonstration purposes.",
      "versions": [
        {
          "version": "Delta",
          "supportedLanguages": [
            "en-us",
            "es"
          ],
          "intents": [
            {
              "name": "OrderCookie",
              "entities": [
                {
                  "name": "ProductName",
                  "type": "String"
                },
                {
                  "name": "Size",
                  "type": "Integer"
                },
                {
                  "name": "Weight",
                  "type": "Decimal"
                },
                {
                  "name": "ConsumeBefore",
                  "type": "Duration"
                },
                {
                  "name": "Diet",
                  "type": "Boolean"
                },
                {
                  "name": "CurrentPrice",
                  "type": "Currency"
                },
                {
                  "name": "ExpiryDate",
                  "type": "Datetime"
                },
                {
                  "name": "Ingredients",
                  "type": "StringCollection"
                },
                {
                  "name": "Presentations",
                  "type": "IntegerCollection"
                },
                {
                  "name": "AvailableWeights",
                  "type": "DecimalCollection"
                },
                {
                  "name": "ShelLifeOptions",
                  "type": "DurationCollection"
                },
                {
                  "name": "ProductAttributes",
                  "type": "BooleanCollection"
                },
                {
                  "name": "previousPrices",
                  "type": "CurrencyCollection"
                },
                {
                  "name": "batchProductionDates",
                  "type": "DatetimeCollection"
                }
              ]
            }
          ]
        },
        {
          "version": "Alpha",
          "supportedLanguages": [
            "en-us",
            "es"
          ],
          "intents": [
            {
              "name": "OrderPizza",
              "entities": [
                {
                  "name": "name",
                  "type": "String"
                },
                {
                  "name": "Size",
                  "type": "Integer"
                },
                {
                  "name": "Ingredients",
                  "type": "StringCollection"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": "4867f79e-a2e9-4e9a-8080-3a42f7765385",
      "name": "OrderTripBot",
      "provider": "ChatGPT",
      "description": "This is a mock bot for demonstration purposes.",
      "versions": [
        {
          "version": "Release",
          "supportedLanguages": [
            "en-us",
            "es"
          ],
          "intents": [
            {
              "name": "OrderTrip",
              "entities": [
                {
                  "name": "City",
                  "type": "String"
                },
                {
                  "name": "FromDate",
                  "type": "Datetime"
                },
                {
                  "name": "EndDate",
                  "type": "Datetime"
                }
              ]
            }
          ]
        },
        {
          "version": "Beta",
          "supportedLanguages": [
            "en-us",
            "es"
          ],
          "intents": [
            {
              "name": "OrderFlight",
              "entities": [
                {
                  "name": "Origin",
                  "type": "String"
                },
                {
                  "name": "Destination",
                  "type": "String"
                },
                {
                  "name": "Size",
                  "type": "Integer"
                },
                {
                  "name": "FromDate",
                  "type": "Datetime"
                },
                {
                  "name": "EndDate",
                  "type": "Datetime"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
There's a limit of 50 bots in the list, 50 versions to a bot, 50 intents to a version, and 50 entities to an intent. Bot IDs and version IDs are case-sensitive.

Bot
Field Name

Description

Type

Required

id

This is a string type that should denote a unique ID of the bot for calling purposes by the Genesys service (EG a UUID). This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

name

This is the name that will be displayed to the user in Architect. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

provider

The provider of the bot. Genesys will use this info for analytics and reporting purposes. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

description

An optional description of the bot. This can be up to 256 characters long and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

versions

This is a list of bot versions (limit of 50).

Array of BotVersion objects

Yes. At least one version

BotVersion
Field Name

Description

Type

Required

version

This is a name denoting the bot version that will be displayable to the user in Architect. This can be up to 100 characters and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

supportedLanguages

This is a list of languages that the bot can support (all lowercase). These should match the supported master list of languages in architect. These will be used for flow language matching and no fallbacks will be performed on these. EG 'en-us' or 'es', etc; These language codes are W3C language identification tags (ISO 639-1 for the language name and ISO 3166 for the country code)

Array of String

Yes

intents

This is a list of intents that the bot can return (limit of 50)

Array of BotIntent objects

Yes. At least one intent

BotIntent
Field Name

Description

Type

Required

name

This is the name of the intent. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace.

String

Yes

entities

A list of slot/entity values that can be associated with this intent (limit of 50)

Array of BotEntity objects

No

BotEntity
Field Name

Description

Type

Required

name

The name of the entity (displayable to the user in Architect). This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace

String

Yes

type

The datatype of the entity. This should correspond to the supported Architect datatypes: String, Integer, Decimal, Duration, Boolean, Currency, or Datetime.

It is also supported collections of these types like StringCollection, IntegerCollection, DecimalCollection, DurationCollection, BooleanCollection, CurrencyCollection, or DatetimeCollection

String. It must be one of the

BotEntityType

supported


Yes

BotEntityType
Type Name

Description

String

An array of characters. Max 32000 characters

Integer

An integral numeric value.

Examples: -3, 0, 1776.

Minimum is -999999999999999 and max is 999999999999999

Decimal

A numeric value with up to 40 digits of precision.

Examples: 3.141593, -0.012, 73.

Minimum is -9999999999999999999999999999999999999999.0, maximum is 9999999999999999999999999999999999999999.0

Duration

A duration value in XSD format, with the exception that years (Y) and months (D) are not supported, and time fractions less than milliseconds are ignored.

The smallest duration value is -P11574074DT1H46M39.999S, and the largest is +P11574074DT1H46M39.999S.

Examples: P1D, PT0S, PT1H15M30.250567S (treated the same as PT1H15M30.250S), -P1DT3H

Boolean

A true/false boolean value.

Examples: true, false

Currency

JSON object with 'amount' and 'code' fields as an escaped JSON string. The amount is a decimal value, and the code is a three letter ISO 4217 currency code.

Examples: {\"amount\": 3.49, \"code\": \"USD\"}

Datetime

A datetime value in extended ISO 8601 format. The smallest datetime value is 1800-01-01T00:00:00Z, and the largest is 2200-12-31T23:59:59Z.

Examples: 2007-04-25T14:21:08, 2007-04-25T14:21:08Z, 2007-04-25T14:21:08-05:00.

All values will be converted and used as UTC internally.

StringCollection

Array of String values.

IntegerCollection

Array of Integer values.

DecimalCollection

Array of Decimal values.

DurationCollection

Array of Duration values.

BooleanCollection

Array of Boolean values.

CurrencyCollection

Array of Currency values.

DatetimeCollection

Array of Datetime values.

Get a specific Bot details webhook
Your Bot Connector Service Provider platform can receive requests to retrieve a specific bot by implementing the /bots/{botId} endpoint. This endpoint uses the same response model as the previous one.

Endpoint

GET https://{bcsp.example.com}/botconnector/bots/{botId}

Request


Body


No Request Body


Response


HTTPS Status


200 OK


Body


Example BotDetails
{
    "id": "11095674-46cc-4a87-b0bb-385b317ad000",
    "name": "OrderCookieBot",
    "provider": "AWS Lex V2",
    "description": "This is a mock bot for demonstration purposes.",
    "versions": [
      {
        "version": "Delta",
        "supportedLanguages": [
          "en-us",
          "es"
        ],
        "intents": [
          {
            "name": "OrderCookie",
            "entities": [
              {
                "name": "ProductName",
                "type": "String"
              },
              {
                "name": "Size",
                "type": "Integer"
              },
              {
                "name": "Weight",
                "type": "Decimal"
              },
              {
                "name": "ConsumeBefore",
                "type": "Duration"
              },
              {
                "name": "Diet",
                "type": "Boolean"
              },
              {
                "name": "CurrentPrice",
                "type": "Currency"
              },
              {
                "name": "ExpiryDate",
                "type": "Datetime"
              },
              {
                "name": "Ingredients",
                "type": "StringCollection"
              },
              {
                "name": "Presentations",
                "type": "IntegerCollection"
              },
              {
                "name": "AvailableWeights",
                "type": "DecimalCollection"
              },
              {
                "name": "ShelLifeOptions",
                "type": "DurationCollection"
              },
              {
                "name": "ProductAttributes",
                "type": "BooleanCollection"
              },
              {
                "name": "previousPrices",
                "type": "CurrencyCollection"
              },
              {
                "name": "batchProductionDates",
                "type": "DatetimeCollection"
              }
            ]
          }
        ]
      },
      {
        "version": "Alpha",
        "supportedLanguages": [
          "en-us",
          "es"
        ],
        "intents": [
          {
            "name": "OrderPizza",
            "entities": [
              {
                "name": "name",
                "type": "String"
              },
              {
                "name": "Size",
                "type": "Integer"
              },
              {
                "name": "Ingredients",
                "type": "StringCollection"
              }
            ]
          }
        ]
      }
    ]
  }
Incoming Messages
The customer BCSP platform can receive incoming messages sent by end-users via Genesys Cloud Messaging by implementing the POST request to https://{bcsp.example.com}/botconnector/messages. The Bot Connector Service will route the incoming message and invoke the configured webhook to the customer BCSP platform.

Some bots may respond quickly, handling tasks such as detecting user intent or providing a default welcome message or canned response. In these cases, the response can be included in the same request to the /messages endpoint. It is important to note that there is a limited amount of timeout available for these requests; if the timeout is exceeded, the request will be marked as failed.

Minimum Response Timeout: 1.5 seconds

Maximum Response Timeout: 60 seconds

Other Bots, particularly those utilizing Generative AI or large language models (LLMs), may take longer to generate a response. In such cases, the bot can respond with a status of "MoreData" to indicate that it doesn't have the complete response ready yet but wants to keep the session open.

Once the bot's response is prepared, it can send an outgoing message to the end end-user.

This approach also allows for more advanced use cases, such as providing fulfillment progress updates. The bot can inform the user that it is still finalizing the order at regular intervals. This prevents the user from thinking that the bot has become unresponsive, especially in situations where the bot must interact with multiple back-end systems that may be slow. Additionally, the bot can send periodic reminders to the user for any required information. The bot will be able to send messages during the duration of the session. For more information, please refer to the Outgoing Messages section.



Send an incoming message to the bot webhook
Your Bot Connector Service Provider platform can receive a request to send an incoming message from an end-user to the bot by implementing the /messages endpoint.

Endpoint

POST https://{bcsp.example.com}/botconnector/messages

Request


Body


Example IncomingMessage Request
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "messageId": "aa30d0f5-a7de-4949-a59d-b527eddb7a78",
  "inputMessage":
  {
    "type" : "Structured",
    "text" : "Message sent to bot",
    "content" : [
      {
        "contentType":"ButtonResponse",
        "buttonResponse": {
          "type":"QuickReply",
          "text":"Button Response Text",
          "payload":"cookie"
        }
      }
    ]
  },
  "languageCode": "en-us",
  "botSessionTimeout": 60,
  "genesysConversationId" : "31408724-1e03-44ca-a698-31da56dd08f4",
  "parameters":
  {
    "parameter1" : "value1",
    "parameter2" : "value2"
  }
}
Response


HTTPS Status

200 OK

Body


Example IncomingMessage Response
{
  "botState": "Complete",
  "intent" : "OrderCookie",
  "confidence" : 0.5,
  "replyMessages":
  [
    {
      "type":"Text",
      "text":"your cookie is ordered"
    },
    {
      "type":"Structured",
      "text": "What would you like to do?",
      "content" : [
        {
          "contentType": "QuickReply",
          "quickReply": {
            "text":"I want a cookie",
            "payload": "cookie"
          }
        }
      ]
    }
  ],
  "entities": [
    {
      "name": "ProductName",
      "type": "String",
      "value": "Chocolate Chip Cookie"
    },
    {
      "name": "Size",
      "type": "Integer",
      "value": "12"
    },
    {
      "name": "Weight",
      "type": "Decimal",
      "value": "85.6"
    },
    {
      "name": "ConsumeBefore",
      "type": "Duration",
      "value": "P30D"
    },
    {
      "name": "Diet",
      "type": "Boolean",
      "value": "false"
    },
    {
      "name": "CurrentPrice",
      "type": "Currency",
      "value": "{\"amount\": 3.49, \"code\": \"USD\"}"
    },
    {
      "name": "ExpiryDate",
      "type": "Datetime",
      "value": "2024-03-15T23:59:59.000Z"
    },
    {
      "name": "Ingredients",
      "type": "StringCollection",
      "values": ["flour", "sugar", "butter", "chocolate chips", "eggs"]
    },
    {
      "name": "Presentations",
      "type": "IntegerCollection",
      "values": ["6", "12", "24"]
    },
    {
      "name": "AvailableWeights",
      "type": "DecimalCollection",
      "values": ["50.0", "85.5", "100.0"]
    },
    {
      "name": "ShelLifeOptions",
      "type": "DurationCollection",
      "values": ["P15D", "P30D", "P45D"]
    },
    {
      "name": "ProductAttributes",
      "type": "BooleanCollection",
      "values": ["true", "false", "true"]
    },
    {
      "name": "previousPrices",
      "type": "CurrencyCollection",
      "values": [
        "{\"amount\": 3.49, \"code\": \"USD\"}",
        "{\"amount\": 3.29, \"code\": \"USD\"}",
        "{\"amount\": 2.99, \"code\": \"USD\"}"
      ]
    },
    {
      "name": "batchProductionDates",
      "type": "DatetimeCollection",
      "values": [
        "2024-02-01T10:00:00.000Z",
        "2024-02-02T10:00:00.000Z",
        "2024-02-03T10:00:00.000Z"
      ]
    }
  ],
  "parameters":
  {
    "output_parameter1" : "output_value1",
    "output_parameter2" : "output_value2"
  }
}
IncomingMessagesRequest
Field Name

Description

Type

Required

botId

The unique id of the bot.

String

Yes

botVersion

The version of the bot.

String

Yes

botSessionId

This is the id of the session. This id will be used for an entire conversation with the bot (a series of back and forth between the bot and the user until the bot has fulfilled its intent).

The BCSP platform should store and use the botSessionId when sending outgoing messages to the end-users.

String

Yes

messageId

This is an id generated by the Bot Connector service to identify the message.

String

Yes

languageCode

Language code for the conversation (e.g., ‘en-US’)

String

Yes

botSessionTimeout

This is a timeout value for an entire conversation in minutes. The Bot won’t be able to send outgoing messages when the session has expired.

Integer

Yes

genesysConversationId

This is Genesys Cloud id for the conversation that launched this bot. This can be used for debugging or other data tracking efforts.

String

Yes

parameters

This is a map of string-string key, value pairs containing optional fields that can be passed down to the bot for custom behavior, tracking, etc;

map of string-string key, value pairs

No

inputMessage

This is the message being sent to the bot.

InputMessage

object


Yes

InputMessage
Field Name

Description

Type

Required

type

Type of the input message (Text or Structured)

String

Yes

text

The text of the message being sent to the bot.

String

Yes if using Text type.

No, if using Structured type.

content

A list of content elements in the message.

It follows the standardized Genesys Normalized Format.

ButtonResponse is supported.

Array of

InputMessageContent


Yes if using Structured type.

No, if using Text type.

InputMessageContent
Field Name

Description

Type

Required

contentType

The type of content.

ButtonResponse is supported

String

Yes

buttonResponse

Button response content.

ButtonResponse

object


Yes if contentType is ButtonResponse

ButtonResponse
Field Name

Description

Type

Required

type

Describes the button that resulted in the Button Response.

Allowed values:

Button - A button in a structured message such as a card.

QuickReply - A quick reply.

String

Yes

text

The response text from the button click.

String

Yes

payload

The response payload associated with the clicked button.

String

Yes

IncomingMessagesResponse
Field Name

Description

Type

Required

botState

Complete, Failed or MoreData

‘Complete'. This state is used when the bot has successfully fulfilled the user's intent and no further input from the user is required. Once the response is processed, the bot session will be closed and will no longer be available for use.

‘MoreData’ can be used in various scenarios,

When the bot needs additional input from the user to fill in pending slot/entity values.

When the bot does not have the response ready at that moment and will send it later as an outgoing message.

Using the MoreData state will keep the bot session open, subject to expiration based on the configured botSessionTimeout.

'Failed'. If the bot encounters an error or determines that it cannot fulfill the user's intent, it can use the Failed state. Once the response is processed, the bot session will be closed, and the Inbound Flow will transition to the configured failure path in Architect, which may include contacting a live agent.

String

Yes

intent

The discovered intent. Bot Connector expects 1 intent back. If the underlying service returns more than 1 intent, return the one with the most confidence.

When returning botState ‘Complete', an intent should be present in the response.

If no intent is returned Bot Connector will treat that as a non-found intent and take the failure path in the flow.

String

Yes if using botState 'Complete'

confidence

A value between 0 and 1.0 denoting the confidence of the discovered intent (if found) this is optional and if left null Genesys assumes a confidence of 1.0 on success and 0 on fail.

Float

No

parameters

This is a map of string-string key, value pairs containing optional fields that can be passed from the bot for custom behavior, tracking, etc, which can be used by the flow.

map of string-string key, value pairs

No

errorInfo

If the botState is ‘Failed’ the bot can return this error object with more details about the error.

ErrorInfo

object


No

entities

A set of entity/slot values that go along with the intent.

It must comply with the entities configured in the flow.

Array of

BotEntityValue

objects


No

replyMessages

This is a list of messages to send back to the user, this field can be null on reply or an empty list.

Array of

ReplyMessage

objects


No

ErrorInfo
Field Name

Description

Type

Required

errorCode

The specific code of the error.

String

Yes

errorMessage

A detailed description of the error.

String

Yes

BotEntityValue
Field Name

Description

Type

Required

name

The name of the entity.

String

Yes

type

The data type of the entity. Valid types include: String, Integer, Decimal, Boolean, Duration, Datetime, Currency, StringCollection, IntegerCollection, DecimalCollection, BooleanCollection, DurationCollection, DatetimeCollection, CurrencyCollection.

String

Yes

value

The string value of the entity for simple types. Required when using non-collection types. Format depends on the 'type' field:

String: "any text”

Integer: whole number (e.g., "42")

Decimal: number with optional decimal point (e.g., "42.5")

Boolean: "true" or "false"

Duration: ISO-8601 duration format (e.g., "PT1H30M" for 1 hour and 30 minutes)

Datetime: ISO-8601 datetime format (e.g., "2023-04-15T14:30:00Z")

Currency: JSON object with 'amount' and 'code' fields as an escaped JSON string (e.g., "{\"amount\":10.50,\"code\":\"USD\"}" - note the escaped quotes)."

String

Yes for non-collection types

values

The collection values for collection types. Required when using collection types.

Each value must follow the format of its base type:

StringCollection: array of strings

IntegerCollection: array of integer strings (e.g., "1", "2", "3")

DecimalCollection: array of decimal strings (e.g., "1.5", "2.0", "3.75")

BooleanCollection: array of boolean strings (e.g., "true", "false")

DurationCollection: array of ISO-8601 duration strings

DatetimeCollection: array of ISO-8601 datetime strings

CurrencyCollection: array of escaped JSON currency object strings (e.g., "{\"amount\":10.50,\"code\":\"USD\"}", "{\"amount\":25.00,\"code\":\"EUR\"}" - note the escaped quotes)."

Array of Strings

Yes for collection types

ReplyMessage
Field Name

Description

Type

Required

type

Message type (Text or Structured):

Text. A text message that could contain text only or text with attachments.

Structured. A structured message that contains rich message features such as quick replies

String

Yes

text

Message text. The text of the message being sent to the end-user.

String

Yes if using 'Text' type

content

A list of content elements to send back to the user. It follows the standardized Genesys Normalized Format.

Array of

ReplyMessageContent

objects


Yes if using ‘Structured' type

ReplyMessageContent
Field Name


Description


Type


Required


contentType

Supported message content types for bot responses:

QuickReply

Card

Carousel

Attachment

String

Yes

quickReply

A quick reply.

QuickReply

object


Yes if using ‘QuickReply' contentType

card

A card content type.

Card

object


Yes if using 'Card' contentType

carousel

A carousel content type.

Carousel

object


Yes if using ‘Carousel' contentType

attachment

An attachment such as an Image.

Attachment

object


Yes if using ‘Attachment' contentType

QuickReply
Field Name

Description

Type

Required

text

Text to show inside the quick reply.

String

Yes

payload

Content of the payload included in the quick reply response. Could be an ID identifying the quick reply response.

String

Yes

image

URL of an image associated with the quick reply.

String

No

Card
Field Name

Description

Type

Required

title

Text to show in the title.

String

Yes

description

Text to show in the description.

String

No

image

URL of an image.

String

No

video

URL of a video.

String

No

defaultAction

The default button action.

CardAction object

No

actions

An array of action objects.

Array of CardAction objects

Yes

CardAction
Field Name

Description

Type

Required

type

Describes the type of action.

Link - An action to direct a user to a URL of a web page.

Postback - An action to post a message back to the sender.

String

Yes

text

The response text from the button click.

String

Yes

payload

Text to be returned as the payload from a ButtonResponse when a button is clicked. The payload and text are a combination which will have to be unique across each card and carousel in order to determine which button was clicked in that card or carousel.

String

Yes

url

A URL of a web page to direct the user to.

String

Yes

Carousel
Field Name

Description

Type

Required

cards

An array of card objects.

Array of Card objects

Yes

Attachment
Field Name

Description

Type

Required

id

Provider specific ID for attachment. For example, a LINE sticker ID.

String

Yes

mediaType

The type of attachment this instance represents.

Image- An image such as PNG or JPG.

Video - A video such as MP4 or MOV.

Audio - An audio sample such as MP3 or OGG.

File - A file such as PDF.

Link - A link to a website or other online resource.

String

Yes

url

URL of the attachment.

String

Yes

filename

File name of the attachment.

String

Yes

mime

Attachment mime type

https://www.iana.org/assignments/media-types/media-types.xhtml)

.


String

No

sha256

Secure hash of the attachment content.

String

No

contentSizeBytes

Size in bytes of the attachment content.

Long

No

Expected error responses for webhooks
Error responses should adhere to standard REST guidelines. In general, Genesys expects the following status codes:

200: Success
400s: Logical errors (e.g., bot not found, invalid input text)
500s: Service-critical errors (e.g., service downtime, service-level errors)
200 - Success
A 200 status code should be returned when the process completes successfully, even if no intent was found and the session is intended to end. In this case, the botState should indicate a state of ‘Failed'.

4xx Errors
4xx errors should be returned for any logical errors, such as "not found" (404) or invalid inputs (e.g., bad input text). These are errors that could potentially succeed with different inputs in a future call. The Bot Connector service will not retry webhook calls for these types of errors. A 4xx error will automatically trigger a flow error that takes the failure path.

On a regular basis, these errors shouldn’t occur as the Bot Connector Service will manage the session to ensure valid data is sent. Sometimes it can be an indication that a remedial action is required, like updating the Flow with the new bot configuration and re-publish.

5xx Errors
Webhook calls will be retried for 5xx errors to potentially overcome transient issues. If all retry attempts are exhausted, the flow will transition to the configured failure path. Permanent 5xx errors may also trigger additional mitigations, such as throttling until the service is restored. These should be used sparingly.

Connection Secret
Customers can set up a connection secret in the Credential section of the Digital Bot Connector Integration UI. The Digital Bot Connector service will include this connection secret as a header in requests to the BCSP endpoints, using the name and value that were configured. It is recommended that the BCSP verifies the presence of the connection secret in the request headers and validates it is correct. If the secret is missing from the headers or not valid, a 403 Forbidden error can be returned.

Outgoing Messages
When a bot needs to send updates back to the end-user, the BCSP platform prepares the message for delivery and sends a POST request to the Genesys Cloud Public API method POST https://api.{GCenvironment}/api/v2/integrations/botconnectors/outgoing/messages. The Bot Connector service will validate the message, return a response code to the BCSP platform, and deliver the message to the end-user through Genesys Cloud Messaging. The BCSP platform will need to utilize the existing built-in authorization mechanism in place for Public API. It requires the integration:botconnector:send permissions.



Send an outgoing message to the end-user
Your Bot Connector Service Provider (BCSP) platform can send messages to the end-user by calling the api.{GCenvironment}/api/v2/integrations/botconnectors/outgoing/messages endpoint available in Public API. To send messages, you must use an ongoing open session, which is specified in the botSessionId field.

The request utilizes the same fields as those specified in the incoming messages response, including botState, intent, confidence, parameters, errorInfo, entities, and replyMessages. These fields function in the same way, allowing the bot to return any discovered or fulfilled intent, as well as content messages to display to the user.

In addition to these fields, the request requires some extra fields to correlate with the correct ongoing bot session with the bot. These include botSessionId, botId, botVersion, and languageCode. The botId and botVersion are required to validate any potential mismatch, ensuring that the BCSP platform sends the correct data.

Endpoint

POST https://api.{GCenvironment}/api/v2/integrations/botconnectors/outgoing/messages

Request


Body

Outgoing Message Body


Response


HTTPS Status

200 OK

Body


Example OutgoingMessage Response
{
  "messageId": "4d68290c-104a-4073-b6dd-3bb24d1f612d"
}
HTTPS Status

HTTP Error Code

409

409

409

409

409

integration.not.active

session.already.closed

session.not.found

session.bot.id.mismatch

session.bot.version.mismatch

OutgoingMessageBody

Example OutgoingMessage Body
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Complete",
  "languageCode": "en-us",
  "intent" : "orderCookie",
  "confidence" : 0.5,
  "replyMessages":
  [
    {
      "type":"Text",
      "text":"your cookie is ordered"
    },
    {
      "type":"Structured",
      "text": "What would you like to do?",
      "content" : [
        {
          "contentType": "QuickReply",
          "quickReply": {
            "text":"I want a cookie",
            "payload": "cookie"
          }
        }
      ]
    }
  ],

  "entities": [
    {
      "name": "ProductName",
      "type": "String",
      "value": "Chocolate Chip Cookie"
    },
    {
      "name": "Size",
      "type": "Integer",
      "value": "12"
    },
    {
      "name": "Weight",
      "type": "Decimal",
      "value": "85.6"
    },
    {
      "name": "ConsumeBefore",
      "type": "Duration",
      "value": "P30D"
    },
    {
      "name": "Diet",
      "type": "Boolean",
      "value": "false"
    },
    {
      "name": "CurrentPrice",
      "type": "Currency",
      "value": "{\"amount\": 3.49, \"code\": \"USD\"}"
    },
    {
      "name": "ExpiryDate",
      "type": "Datetime",
      "value": "2024-03-15T23:59:59.000Z"
    },
    {
      "name": "Ingredients",
      "type": "StringCollection",
      "values": ["flour", "sugar", "butter", "chocolate chips", "eggs"]
    },
    {
      "name": "Presentations",
      "type": "IntegerCollection",
      "values": ["6", "12", "24"]
    },
    {
      "name": "AvailableWeights",
      "type": "DecimalCollection",
      "values": ["50.0", "85.5", "100.0"]
    },
    {
      "name": "ShelLifeOptions",
      "type": "DurationCollection",
      "values": ["P15D", "P30D", "P45D"]
    },
    {
      "name": "ProductAttributes",
      "type": "BooleanCollection",
      "values": ["true", "false", "true"]
    },
    {
      "name": "previousPrices",
      "type": "CurrencyCollection",
      "values": [
        "{\"amount\": 3.49, \"code\": \"USD\"}",
        "{\"amount\": 3.29, \"code\": \"USD\"}",
        "{\"amount\": 2.99, \"code\": \"USD\"}"
      ]
    },
    {
      "name": "batchProductionDates",
      "type": "DatetimeCollection",
      "values": [
        "2024-02-01T10:00:00.000Z",
        "2024-02-02T10:00:00.000Z",
        "2024-02-03T10:00:00.000Z"
      ]
    }
  ],
  "parameters":
  {
    "output_parameter1" : "output_value1",
    "output_parameter2" : "output_value2"
  }
}
OutgoingMessagesRequest
Field Name

Description

Type

Required

botId

The unique id of the bot.

String

Yes

botVersion

The version of the bot.

String

Yes

botSessionId

An ongoing open bot session.

String

Yes

languageCode

Language code for the conversation (e.g., ‘en-US’)

String

Yes

botState

Complete, Failed or MoreData

‘Complete'. This state is used when the bot has successfully fulfilled the user's intent and no further input from the user is required. Once the response is processed, the bot session will be closed and will no longer be available for use.

‘MoreData’ can be used in various scenarios,

When the bot needs additional input from the user to fill in pending slot/entity values.

When the bot does not have the response ready at that moment and will send it later as an outgoing message.

Using the MoreData state will keep the bot session open, subject to expiration based on the configured botSessionTimeout.

'Failed'. If the bot encounters an error or determines that it cannot fulfill the user's intent, it can use the Failed state. Once the response is processed, the bot session will be closed, and the Inbound Flow will transition to the configured failure path in Architect, which may include contacting a live agent.

String

Yes

intent

The discovered intent. Bot Connector expects 1 intent back. If the underlying service returns more than 1 intent, return the one with the most confidence.

When returning botState ‘Complete', an intent should be present in the response.

If no intent is returned Bot Connector will treat that as a non-found intent and take the failure path in the flow.

String

Yes if using botState 'Complete'

confidence

A value between 0 and 1.0 denoting the confidence of the discovered intent (if found) this is optional and if left null Genesys assumes a confidence of 1.0 on success and 0 on fail.

Float

No

parameters

This is a map of string-string key, value pairs containing optional fields that can be passed from the bot for custom behavior, tracking, etc, which can be used by the flow.

map of string-string key, value pairs

No

errorInfo

If the botState is ‘Failed’ the bot can return this error object with more details about the error.

ErrorInfo

object


No

entities

A set of entity/slot values that go along with the intent.

It must comply with the entities configured in the flow.

Array of

BotEntityValue

objects


No

replyMessages

This is a list of messages to send back to the user, this field can be null on reply or an empty list.

Array of

ReplyMessage

objects


No

OutgoingMessagesResponse
Field Name

Description

Type

Required

messageId

This is an id generated by the Bot Connector service to identify the message.

String

Yes

Quick Replies example
This is an example request for the sending outgoing messages call where the reply messages contains a text message and a structured message containing quick replies.


Example QuickReply
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Complete",
  "languageCode": "en-us",
  "intent" : "orderCookie",
  "confidence" : 0.5,
  "replyMessages":
  [
    {
      "type":"Text",
      "text":"your cookie is ordered"
    },
    {
      "type":"Structured",
      "text": "What would you like to do?",
      "content" : [
        {
          "contentType": "QuickReply",
          "quickReply": {
            "text":"I want a cookie",
            "payload": "cookie"
          }
        }
      ]
    }
  ]
}
Card example
This is an example request for the sending outgoing messages call where the reply messages contains a structured message containing a card.


Example Card
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Complete",
  "languageCode": "en-us",
  "intent": "orderCookie",
  "confidence": 0.5,
  "replyMessages": [
    {
      "type": "Structured",
      "content": [
        {
          "contentType": "Card",
          "card": {
            "title": "50% off Flights to Norway",
            "description": "Valid September to November only",
            "image": "https://www.samplesite.com/photo/1234.jpg",
            "defaultAction": {
              "type": "Link",
              "url": "http://www.samplesite.com/flights/norway"
            },
            "actions": [
              {
                "type": "Link",
                "text": "View Details",
                "url": "http://www.samplesite.com/flights/norway"
              },
              {
                "type": "Postback",
                "text": "Book Now",
                "payload": "I want it"
              }
            ]
          }
        }
      ]
    }
  ]
}
Carousel example
This is an example request for the sending outgoing messages call where the reply messages contains a structured message containing a carousel.


Example Carousel
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Complete",
  "languageCode": "en-us",
  "intent": "orderCookie",
  "confidence": 0.5,
  "replyMessages": [
    {
      "type": "Structured",
      "content": [
        {
          "contentType": "Carousel",
          "carousel": {
            "cards": [
              {
                "title": "50% off Flights to Norway",
                "description": "Valid September to November only",
                "image": "https://www.samplesite.com/photo/1234.jpg",
                "defaultAction": {
                  "type": "Link",
                  "url": "http://www.samplesite.com/flights/norway"
                },
                "actions": [
                  {
                    "type": "Link",
                    "text": "View Details",
                    "url": "http://www.samplesite.com/flights/norway"
                  },
                  {
                    "type": "Postback",
                    "text": "Book Now",
                    "payload": "I want it"
                  }
                ]
              },
              {
                "title": "35% off Flights to Finland",
                "description": "Valid February to March only",
                "image": "https://www.samplesite.com/photo/5678.jpg",
                "defaultAction": {
                  "type": "Link",
                  "url": "http://www.samplesite.com/flights/finland"
                },
                "actions": [
                  {
                    "type": "Link",
                    "text": "View Details",
                    "url": "http://www.samplesite.com/flights/finland"
                  },
                  {
                    "type": "Postback",
                    "text": "Book Now",
                    "payload": "I want it"
                  }
                ]
              }
            ]
          }
        }
      ]
    }
  ]
}
Attachment example
This is an example request for the sending outgoing messages call where the reply messages contains a structured message containing an attachment.

Please note attachments require the type set as Text instead of Structured. The ‘text' field can be used to add some text associated with the attachment such as an image caption.


Example Attachment
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Complete",
  "languageCode": "en-us",
  "intent": "orderCookie",
  "confidence": 0.5,
  "replyMessages": [
    {
      "type": "Text",
      "text": "Example of image caption",
      "content": [
        {
          "contentType": "Attachment",
          "attachment": {
            "id": "attachmentID",
            "filename": "5678.jpg",
            "url": "https://www.samplesite.com/photo/5678.jpg",
            "mediaType": "Image"
          }
        }
      ]
    }
  ]
}
Failed response example
This is an example request for the sending outgoing messages call where the BCSP platform has detected an error or the intent can not be fulfilled.


Example Failed Response
{
  "botId": "11095674-46cc-4a87-b0bb-385b317ad000",
  "botVersion": "Delta",
  "botSessionId": "462064bd-820f-4806-a04b-8bdc915dba3e",
  "botState": "Failed",
  "languageCode": "en-us",
  "errorInfo": {
    "errorCode": "xxx",
    "errorMessage": "A description of the error"
  }
}


How to invoke Genesys Cloud Digital Bot connector from Genesys Cloud messaging Architect flows:

Use the Call Digital Bot Connector action in Architect messaging flows. This action enables you to integrate the messaging flow with any bot source for processing before it returns entities or slots, and intents to Architect. When you use this action, you provide a “bot list.” Architect uses this list to populate fields such as bot name, version, and intents, and then provides the information from the call to the customer’s bot for processing.

Configure the Call Digital Bot Connector action
Name	Description
Name field	Type a distinctive name for the action. The label you enter here becomes the action’s name displayed in the task sequence.
Bot Input Text	Enter the text that you want to send to the bot. The default input text is Message.Message.Body.
Follow-up Response Timeout	
The bot can retrieve follow-up information from the user. Here, enter the amount of time the bot waits for the user’s reply.

The default response timeout is 6 hours. The minimum and maximum allowed timeouts are one minute and three days. The system considers a NOT_SET, zero, or negative duration as errors.

Note: The follow-up response timeout applies to each customer response. Each time the customer responds and then receives another prompt from the bot, the timeout resets.

For example, if the bot asks, “What is your preferred date,” it waits up to 12 hours for a customer response. If the customer responds with a date within the 12-hour time frame and the bot replies, “Thank you, do you have an alternate choice,” then the flow restarts the timeout. The flow waits another 12 hours for the response about an alternate date.

Bot Response Timeout	
Enter the timeout within which the bot must reply to the customer.

The default response timeout is 30 seconds. The minimum and maximum allowed timeouts are one second and one minute. The system considers a NOT_SET, zero, or negative duration as errors.

Session Timeout	
Enter the timeout after which the messaging session must close. Once a conversation starts, this duration indicates how long a conversation can remain open.

The default session timeout is 12 hours. The minimum and maximum allowed timeouts are one minute and three days. The system considers a NOT_SET, zero, or negative duration as errors.

Digital Bot Integration	
The name of the bot integration you want to use in the flow.

For more information about configuring a Genesys Digital Bot Connector integration, see Configure the Genesys Digital Bot Connector integration.

Digital Bot Name	
The name of the bot to call within the message flow.

Digital Bot Version	The specific version of the bot you want to use. This version is the alias specified in the provided bot list that points to a specific version of a bot.
Session Variables	
The information that you can send to the bot. Enter the name of the variable and a value to assign. You can add multiple variables, and you can reorder them.

Most commonly, use session variables for bots that start the digital bot connector with the completed intent. This process ensures that the digital bot connector receives the necessary context for which to perform its operations.

Intents	
The options that appear in this section reflect the logic configured in the bot. Each intent represents an action to perform. For example, book a hotel (BookHotel) or order flowers (OrderFlowers). Each intent path matches an output path for the Call Digital Bot Connector action in the task editor.

Below each intent, Architect displays the configured bot slots or entities, or data the user must provide to fulfill the intent. Using the BookHotel intent as an example, the slots could include location, check-in date, room type, and number of nights. If the user chooses the BookHotel path, then the bot provides the slots associated with that path.

Failure Outputs	
Select the variables to which you want to assign the failure data values that the bot returns.

Variable

Value

errorType	
ServiceProviderTimeout: The timeout occurred while calling the service provider’s messages endpoint.
ServiceProviderErrorResponse: Error response received from the service provider’s messages endpoint.
ServiceProviderInvalidResponse: The response from the service provider contains invalid content that failed validation, invalid value for attachments, or attachments when they are not allowed by the integration.
errorMessage	A non-localized message. This string variable can be empty or NOT_SET.
